
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 9ac3484, x86_64-conda_cos6-linux-gnu-gcc 1.24.0.133_b0863d8_dirty -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/root/anaconda3/conda-bld/yosys_1607410735049/work=/usr/local/src/conda/yosys-0.8.0_0003_e80fb742f_20201208_122808 -fdebug-prefix-map=/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/conda=/usr/local/src/conda-prefix -fPIC -Os)


-- Parsing `/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: /home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v
Parsing Verilog input from `/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v' to AST representation.
Generating RTLIL representation for module `\Assignment3'.
Successfully finished Verilog frontend.

-- Running command `tcl /home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/quicklogic/synth.tcl' --
[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

2. Executing Verilog-2005 frontend: /home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v
Parsing Verilog input from `/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\VCC'.
Generating RTLIL representation for module `\GND'.
Generating RTLIL representation for module `\fpga_interconnect'.
Generating RTLIL representation for module `\CLOCK_CELL'.
Generating RTLIL representation for module `\BIDIR_CELL'.
Generating RTLIL representation for module `\SDIOMUX_CELL'.
Generating RTLIL representation for module `\T_FRAG'.
Generating RTLIL representation for module `\B_FRAG'.
Generating RTLIL representation for module `\Q_FRAG'.
Generating RTLIL representation for module `\F_FRAG'.
Generating RTLIL representation for module `\C_FRAG'.
Generating RTLIL representation for module `\ASSP'.
Generating RTLIL representation for module `\MULT'.
Generating RTLIL representation for module `\GMUX_IP'.
Generating RTLIL representation for module `\GMUX_IC'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_sim.v
Parsing Verilog input from `/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_sim.v' to AST representation.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB2_VPR'.
Successfully finished Verilog frontend.

4. Executing SYNTH_QUICKLOGIC pass.

4.1. Executing Verilog-2005 frontend: /home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/cells_sim.v
Parsing Verilog input from `/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

4.2. Executing Verilog-2005 frontend: /home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v
Parsing Verilog input from `/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v' to AST representation.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\AND2I0'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux2x1'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\ahb_gen_bfm'.
Generating RTLIL representation for module `\oscillator_s1'.
Generating RTLIL representation for module `\sdma_bfm'.
Generating RTLIL representation for module `\ahb2fb_asynbrig_if'.
Generating RTLIL representation for module `\fb2ahb_asynbrig_if'.
Generating RTLIL representation for module `\ahb2fb_asynbrig'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro_bfm'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\fifo_controller_model'.
Generating RTLIL representation for module `\ram'.
Warning: Replacing memory \ram with list of registers. See /home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3671, /home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3585, /home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3560
Generating RTLIL representation for module `\x2_model'.
Generating RTLIL representation for module `\ram_block_8K'.
Generating RTLIL representation for module `\sw_mux'.
Generating RTLIL representation for module `\ram8k_2x1_cell'.
Generating RTLIL representation for module `\ram8k_2x1_cell_macro'.
Generating RTLIL representation for module `\gpio_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\signed_mult'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Generating RTLIL representation for module `\RAM_8K_BLK'.
Generating RTLIL representation for module `\RAM_16K_BLK'.
Generating RTLIL representation for module `\FIFO_8K_BLK'.
Generating RTLIL representation for module `\FIFO_16K_BLK'.
Successfully finished Verilog frontend.

4.3. Executing HIERARCHY pass (managing design hierarchy).

4.3.1. Finding top of design hierarchy..
root of   1 design levels: Assignment3         
Automatically selected Assignment3 as design top module.

4.3.2. Analyzing design hierarchy..
Top module:  \Assignment3

4.3.3. Analyzing design hierarchy..
Top module:  \Assignment3
Removed 0 unused modules.

4.4. Executing PROC pass (convert processes to netlists).

4.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 9 empty switches in `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:55$14'.
Cleaned up 9 empty switches.

4.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$114 in module MULT.
Marked 2 switch rules as full_case in process $proc$/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$96 in module Q_FRAG.
Marked 5 switch rules as full_case in process $proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:55$14 in module Assignment3.
Marked 1 switch rules as full_case in process $proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:42$10 in module Assignment3.
Removed a total of 0 dead cases.

4.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 30 assignments to connections.

4.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\Q_FRAG.$proc$/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$97'.
  Set init value: \QZ = 1'0

4.4.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \QST in `\Q_FRAG.$proc$/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$96'.
Found async reset \QRT in `\Q_FRAG.$proc$/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$96'.

4.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\MULT.$proc$/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$114'.
     1/2: $0\Cmult[63:0] [63:32]
     2/2: $0\Cmult[63:0] [31:0]
Creating decoders for process `\Q_FRAG.$proc$/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$97'.
Creating decoders for process `\Q_FRAG.$proc$/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$96'.
     1/1: $0\QZ[0:0]
Creating decoders for process `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:55$14'.
     1/64: $2$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:134$9$\seg[6:0]$79
     2/64: $1\a[0:0]
     3/64: $3$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:118$7$\seg[6:0]$77
     4/64: { $5\a[0:0] $5\b[0:0] $5\c[0:0] $5\d[0:0] $5\e[0:0] $5\f[0:0] $5\g[0:0] }
     5/64: $2$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:118$7$\seg[6:0]$73
     6/64: $2$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:118$7$\num_i[2:0]$74
     7/64: $5\currentstate[2:0]
     8/64: $5\nextstate[2:0]
     9/64: $2$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:125$8$\num_i[2:0]$76
    10/64: $2$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:125$8$\seg[6:0]$75
    11/64: $3$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:108$6$\seg[6:0]$71
    12/64: $3$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:101$5$\seg[6:0]$70
    13/64: { $4\a[0:0] $4\b[0:0] $4\c[0:0] $4\d[0:0] $4\e[0:0] $4\f[0:0] $4\g[0:0] }
    14/64: $2$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:101$5$\seg[6:0]$66
    15/64: $2$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:101$5$\num_i[2:0]$67
    16/64: $4\currentstate[2:0]
    17/64: $4\nextstate[2:0]
    18/64: $2$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:108$6$\num_i[2:0]$69
    19/64: $2$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:108$6$\seg[6:0]$68
    20/64: $3$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:90$4$\seg[6:0]$64
    21/64: $3$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:83$3$\seg[6:0]$63
    22/64: { $3\a[0:0] $3\b[0:0] $3\c[0:0] $3\d[0:0] $3\e[0:0] $3\f[0:0] $3\g[0:0] }
    23/64: $2$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:83$3$\seg[6:0]$59
    24/64: $2$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:83$3$\num_i[2:0]$60
    25/64: $3\currentstate[2:0]
    26/64: $3\nextstate[2:0]
    27/64: $2$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:90$4$\num_i[2:0]$62
    28/64: $2$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:90$4$\seg[6:0]$61
    29/64: $3$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:71$2$\seg[6:0]$57
    30/64: $3$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:63$1$\seg[6:0]$56
    31/64: { $2\a[0:0] $2\b[0:0] $2\c[0:0] $2\d[0:0] $2\e[0:0] $2\f[0:0] $2\g[0:0] }
    32/64: $2$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:63$1$\seg[6:0]$52
    33/64: $2$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:63$1$\num_i[2:0]$53
    34/64: $2\currentstate[2:0]
    35/64: $2\nextstate[2:0]
    36/64: $2$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:71$2$\num_i[2:0]$55
    37/64: $2$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:71$2$\seg[6:0]$54
    38/64: $1$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:71$2$\num_i[2:0]$36
    39/64: $1$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:71$2$\seg[6:0]$35
    40/64: $1$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:63$1$\num_i[2:0]$34
    41/64: $1$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:63$1$\seg[6:0]$33
    42/64: $1\nextstate[2:0]
    43/64: $1\currentstate[2:0]
    44/64: $3$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:125$8$\seg[6:0]$78
    45/64: $1\g[0:0]
    46/64: $1\f[0:0]
    47/64: $1\e[0:0]
    48/64: $1\d[0:0]
    49/64: $1\c[0:0]
    50/64: $1\b[0:0]
    51/64: $1$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:134$9$\num_i[2:0]$50
    52/64: $1$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:134$9$\seg[6:0]$49
    53/64: $1$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:125$8$\num_i[2:0]$48
    54/64: $1$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:125$8$\seg[6:0]$47
    55/64: $1$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:118$7$\num_i[2:0]$46
    56/64: $1$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:118$7$\seg[6:0]$45
    57/64: $1$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:108$6$\num_i[2:0]$44
    58/64: $1$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:108$6$\seg[6:0]$43
    59/64: $1$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:101$5$\num_i[2:0]$42
    60/64: $1$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:101$5$\seg[6:0]$41
    61/64: $1$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:90$4$\num_i[2:0]$40
    62/64: $1$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:90$4$\seg[6:0]$39
    63/64: $1$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:83$3$\num_i[2:0]$38
    64/64: $1$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:83$3$\seg[6:0]$37
Creating decoders for process `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:42$10'.
     1/2: $1\delay[26:0]
     2/2: $1\clock[0:0]

4.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.4.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\MULT.\Cmult' using process `\MULT.$proc$/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$114'.
  created direct connection (no actual register cell created).
Creating register for signal `\Q_FRAG.\QZ' using process `\Q_FRAG.$proc$/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$96'.
Warning: Complex async reset for dff `\QZ'.
  created $dffsr cell `$procdff$1383' with positive edge clock and multiple level-sensitive resets.
Creating register for signal `\Assignment3.\a' using process `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:55$14'.
  created $dff cell `$procdff$1384' with positive edge clock.
Creating register for signal `\Assignment3.\b' using process `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:55$14'.
  created $dff cell `$procdff$1385' with positive edge clock.
Creating register for signal `\Assignment3.\c' using process `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:55$14'.
  created $dff cell `$procdff$1386' with positive edge clock.
Creating register for signal `\Assignment3.\d' using process `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:55$14'.
  created $dff cell `$procdff$1387' with positive edge clock.
Creating register for signal `\Assignment3.\e' using process `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:55$14'.
  created $dff cell `$procdff$1388' with positive edge clock.
Creating register for signal `\Assignment3.\f' using process `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:55$14'.
  created $dff cell `$procdff$1389' with positive edge clock.
Creating register for signal `\Assignment3.\g' using process `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:55$14'.
  created $dff cell `$procdff$1390' with positive edge clock.
Creating register for signal `\Assignment3.\currentstate' using process `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:55$14'.
  created $dff cell `$procdff$1391' with positive edge clock.
Creating register for signal `\Assignment3.\nextstate' using process `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:55$14'.
  created $dff cell `$procdff$1392' with positive edge clock.
Creating register for signal `\Assignment3.$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:63$1$\seg' using process `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:55$14'.
  created $dff cell `$procdff$1393' with positive edge clock.
Creating register for signal `\Assignment3.$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:63$1$\num_i' using process `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:55$14'.
  created $dff cell `$procdff$1394' with positive edge clock.
Creating register for signal `\Assignment3.$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:71$2$\seg' using process `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:55$14'.
  created $dff cell `$procdff$1395' with positive edge clock.
Creating register for signal `\Assignment3.$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:71$2$\num_i' using process `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:55$14'.
  created $dff cell `$procdff$1396' with positive edge clock.
Creating register for signal `\Assignment3.$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:83$3$\seg' using process `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:55$14'.
  created $dff cell `$procdff$1397' with positive edge clock.
Creating register for signal `\Assignment3.$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:83$3$\num_i' using process `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:55$14'.
  created $dff cell `$procdff$1398' with positive edge clock.
Creating register for signal `\Assignment3.$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:90$4$\seg' using process `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:55$14'.
  created $dff cell `$procdff$1399' with positive edge clock.
Creating register for signal `\Assignment3.$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:90$4$\num_i' using process `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:55$14'.
  created $dff cell `$procdff$1400' with positive edge clock.
Creating register for signal `\Assignment3.$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:101$5$\seg' using process `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:55$14'.
  created $dff cell `$procdff$1401' with positive edge clock.
Creating register for signal `\Assignment3.$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:101$5$\num_i' using process `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:55$14'.
  created $dff cell `$procdff$1402' with positive edge clock.
Creating register for signal `\Assignment3.$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:108$6$\seg' using process `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:55$14'.
  created $dff cell `$procdff$1403' with positive edge clock.
Creating register for signal `\Assignment3.$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:108$6$\num_i' using process `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:55$14'.
  created $dff cell `$procdff$1404' with positive edge clock.
Creating register for signal `\Assignment3.$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:118$7$\seg' using process `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:55$14'.
  created $dff cell `$procdff$1405' with positive edge clock.
Creating register for signal `\Assignment3.$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:118$7$\num_i' using process `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:55$14'.
  created $dff cell `$procdff$1406' with positive edge clock.
Creating register for signal `\Assignment3.$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:125$8$\seg' using process `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:55$14'.
  created $dff cell `$procdff$1407' with positive edge clock.
Creating register for signal `\Assignment3.$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:125$8$\num_i' using process `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:55$14'.
  created $dff cell `$procdff$1408' with positive edge clock.
Creating register for signal `\Assignment3.$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:134$9$\seg' using process `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:55$14'.
  created $dff cell `$procdff$1409' with positive edge clock.
Creating register for signal `\Assignment3.$func$\seg$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:134$9$\num_i' using process `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:55$14'.
  created $dff cell `$procdff$1410' with positive edge clock.
Creating register for signal `\Assignment3.\clock' using process `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:42$10'.
  created $dff cell `$procdff$1411' with positive edge clock.
Creating register for signal `\Assignment3.\delay' using process `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:42$10'.
  created $dff cell `$procdff$1412' with positive edge clock.

4.4.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 4 empty switches in `\MULT.$proc$/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$114'.
Removing empty process `MULT.$proc$/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$114'.
Removing empty process `Q_FRAG.$proc$/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$97'.
Found and cleaned up 1 empty switch in `\Q_FRAG.$proc$/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$96'.
Removing empty process `Q_FRAG.$proc$/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$96'.
Found and cleaned up 5 empty switches in `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:55$14'.
Removing empty process `Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:55$14'.
Found and cleaned up 1 empty switch in `\Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:42$10'.
Removing empty process `Assignment3.$proc$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:42$10'.
Cleaned up 11 empty switches.

4.5. Executing FLATTEN pass (flatten design).

4.6. Executing TRIBUF pass.

4.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module Assignment3.

4.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Assignment3..
Removed 125 unused cells and 260 unused wires.

4.9. Executing DEMINOUT pass (demote inout ports to input or output).

4.10. Executing OPT pass (performing simple optimizations).

4.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Assignment3.

4.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Assignment3'.
Removed a total of 48 cells.

4.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Assignment3..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$1265.
    dead port 2/2 on $mux $procmux$1267.
    dead port 1/2 on $mux $procmux$1014.
    dead port 2/2 on $mux $procmux$1016.
    dead port 2/2 on $mux $procmux$1021.
    dead port 2/2 on $mux $procmux$1023.
    dead port 2/2 on $mux $procmux$1030.
    dead port 2/2 on $mux $procmux$1051.
    dead port 1/2 on $mux $procmux$1078.
    dead port 2/2 on $mux $procmux$1080.
    dead port 2/2 on $mux $procmux$1086.
    dead port 2/2 on $mux $procmux$1088.
    dead port 2/2 on $mux $procmux$1096.
    dead port 2/2 on $mux $procmux$1120.
    dead port 1/5 on $pmux $procmux$954.
    dead port 2/5 on $pmux $procmux$954.
    dead port 3/5 on $pmux $procmux$954.
    dead port 4/5 on $pmux $procmux$954.
    dead port 1/2 on $mux $procmux$1151.
    dead port 2/2 on $mux $procmux$1153.
    dead port 2/2 on $mux $procmux$1160.
    dead port 2/2 on $mux $procmux$1162.
    dead port 2/2 on $mux $procmux$1171.
    dead port 2/2 on $mux $procmux$967.
    dead port 2/2 on $mux $procmux$969.
    dead port 2/2 on $mux $procmux$975.
    dead port 2/2 on $mux $procmux$992.
    dead port 2/2 on $mux $procmux$1198.
Removed 28 multiplexer ports.

4.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Assignment3.
    New ctrl vector for $mux cell $procmux$973: { }
    New ctrl vector for $pmux cell $procmux$1270: { $procmux$1154_CMP $procmux$1081_CMP $procmux$1017_CMP }
    New ctrl vector for $pmux cell $procmux$1294: { $procmux$1154_CMP $procmux$1081_CMP $procmux$1017_CMP }
    New ctrl vector for $pmux cell $procmux$1300: { $procmux$1154_CMP $procmux$1081_CMP $procmux$1017_CMP }
  Optimizing cells in module \Assignment3.
Performed a total of 4 changes.

4.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Assignment3'.
Removed a total of 0 cells.

4.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Assignment3..
Removed 0 unused cells and 80 unused wires.

4.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Assignment3.

4.10.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Assignment3..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Assignment3.
Performed a total of 0 changes.

4.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Assignment3'.
Removed a total of 0 cells.

4.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Assignment3..

4.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module Assignment3.

4.10.16. Finished OPT passes. (There is nothing left to do.)

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module Assignment3.

4.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Assignment3..

4.13. Executing CHECK pass (checking for obvious problems).
checking module Assignment3..
Warning: Wire Assignment3.\y is used but has no driver.
found and reported 1 problems.

4.14. Executing OPT pass (performing simple optimizations).

4.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Assignment3.

4.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Assignment3'.
Removed a total of 0 cells.

4.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Assignment3..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Assignment3.
Performed a total of 0 changes.

4.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Assignment3'.
Removed a total of 0 cells.

4.14.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Assignment3..

4.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Assignment3.

4.14.9. Finished OPT passes. (There is nothing left to do.)

4.15. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell Assignment3.$add$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:44$11 ($add).
Removed top 5 bits (of 32) from port Y of cell Assignment3.$add$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:44$11 ($add).
Removed top 7 bits (of 32) from port B of cell Assignment3.$gt$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:45$12 ($gt).
Removed top 1 bits (of 3) from port B of cell Assignment3.$procmux$1017_CMP0 ($eq).
Removed top 2 bits (of 7) from mux cell Assignment3.$procmux$1028 ($mux).
Removed top 2 bits (of 3) from mux cell Assignment3.$procmux$1049 ($mux).
Removed top 2 bits (of 3) from port B of cell Assignment3.$procmux$1081_CMP0 ($eq).
Removed top 2 bits (of 7) from mux cell Assignment3.$procmux$1094 ($mux).
Removed top 1 bits (of 3) from mux cell Assignment3.$procmux$1118 ($mux).
Removed top 4 bits (of 7) from mux cell Assignment3.$procmux$1169 ($mux).
Removed top 1 bits (of 3) from mux cell Assignment3.$procmux$1196 ($mux).
Removed top 1 bits (of 3) from port B of cell Assignment3.$procmux$1259_CMP0 ($eq).
Removed top 1 bits (of 3) from mux cell Assignment3.$procmux$1258 ($pmux).
Removed cell Assignment3.$procmux$1300 ($pmux).
Removed cell Assignment3.$procdff$1385 ($dff).
Removed top 1 bits (of 3) from FF cell Assignment3.$procdff$1391 ($dff).
Removed top 1 bits (of 3) from port A of cell Assignment3.$procmux$1017_CMP0 ($eq).
Removed top 1 bits (of 3) from port A of cell Assignment3.$procmux$1081_CMP0 ($eq).
Removed top 1 bits (of 3) from port A of cell Assignment3.$procmux$1259_CMP0 ($eq).
Removed top 1 bits (of 3) from wire Assignment3.$0\currentstate[2:0].
Removed top 1 bits (of 3) from wire Assignment3.$2\currentstate[2:0].
Removed top 1 bits (of 3) from wire Assignment3.$3\currentstate[2:0].
Removed top 2 bits (of 3) from wire Assignment3.$4\currentstate[2:0].
Removed top 5 bits (of 32) from wire Assignment3.$add$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:44$11_Y.
Removed top 1 bits (of 3) from wire Assignment3.currentstate.

4.16. Executing PEEPOPT pass (run peephole optimizers).

4.17. Executing PMUXTREE pass.

4.18. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Assignment3..
Removed 14 unused cells and 36 unused wires.

4.19. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module Assignment3:
  creating $macc model for $add$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:44$11 ($add).
  creating $alu model for $macc $add$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:44$11.
  creating $alu model for $gt$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:45$12 ($gt): new $alu
  creating $alu cell for $gt$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:45$12: $auto$alumacc.cc:485:replace_alu$1514
  creating $alu cell for $add$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:44$11: $auto$alumacc.cc:485:replace_alu$1519
  created 2 $alu and 0 $macc cells.

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Assignment3.

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Assignment3'.
Removed a total of 5 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Assignment3..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Assignment3.
Performed a total of 0 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Assignment3'.
Removed a total of 0 cells.

4.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Assignment3..
Removed 1 unused cells and 11 unused wires.

4.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Assignment3.

4.20.9. Rerunning OPT passes. (Maybe there is more to do..)

4.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Assignment3..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Assignment3.
Performed a total of 0 changes.

4.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Assignment3'.
Removed a total of 0 cells.

4.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Assignment3..

4.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module Assignment3.

4.20.16. Finished OPT passes. (There is nothing left to do.)

4.21. Executing FSM pass (extract and optimize FSM).

4.21.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking Assignment3.currentstate as FSM state register:
    Users of register don't seem to benefit from recoding.
    Circuit seems to be self-resetting.

4.21.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.21.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Assignment3..

4.21.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.21.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.21.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.21.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Assignment3.

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Assignment3'.
Removed a total of 0 cells.

4.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Assignment3..

4.22.5. Finished fast OPT passes.

4.23. Executing MEMORY pass.

4.23.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

4.23.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.23.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Assignment3..

4.23.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.23.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Assignment3..

4.23.6. Executing MEMORY_COLLECT pass (generating $mem cells).

4.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Assignment3..

4.25. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

4.26. Executing PP3_BRAMINIT pass.
cell type $auto$alumacc.cc:485:replace_alu$1514
cell type $auto$alumacc.cc:485:replace_alu$1519
cell type $auto$pmuxtree.cc:35:or_generator$1455
cell type $auto$pmuxtree.cc:35:or_generator$1495
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1423
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1425
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1427
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1431
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1437
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1439
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1443
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1449
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1451
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1453
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1457
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1463
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1465
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1467
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1471
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1477
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1481
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1485
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1491
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1497
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1503
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1511
cell type $logic_not$/home/vedula/qorc-sdk/fpga-examples/Ass3/Ass3.v:47$13
cell type $procdff$1384
cell type $procdff$1386
cell type $procdff$1387
cell type $procdff$1388
cell type $procdff$1389
cell type $procdff$1390
cell type $procdff$1391
cell type $procdff$1411
cell type $procdff$1412
cell type $procmux$1017_CMP0
cell type $procmux$1028
cell type $procmux$1049
cell type $procmux$1081_CMP0
cell type $procmux$1094
cell type $procmux$1118
cell type $procmux$1154_CMP0
cell type $procmux$1169
cell type $procmux$1196
cell type $procmux$1259_CMP0
cell type $procmux$1366
cell type $procmux$1369
cell type u_qlal4s3b_cell_macro

4.27. Executing TECHMAP pass (map to technology primitives).

4.27.1. Executing Verilog-2005 frontend: /home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v
Parsing Verilog input from `/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__QUICKLOGIC_RAMB16K'.
/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:21: Warning: Identifier `\VCC' is implicitly declared.
/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:22: Warning: Identifier `\GND' is implicitly declared.
Generating RTLIL representation for module `\$__QUICKLOGIC_RAMB8K'.
/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:239: Warning: Identifier `\GND' is implicitly declared.
/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:240: Warning: Identifier `\VCC' is implicitly declared.
Generating RTLIL representation for module `\RAM_8K_BLK'.
/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:539: Warning: Range [17:0] select out of bounds on signal `\out_reg0': Setting 2 MSB bits to undef.
Generating RTLIL representation for module `\RAM_16K_BLK'.
/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:825: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 4 MSB bits to undef.
Generating RTLIL representation for module `\FIFO_8K_BLK'.
/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:999: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 20 MSB bits to undef.
Generating RTLIL representation for module `\FIFO_16K_BLK'.
/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:1251: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 4 MSB bits to undef.
Successfully finished Verilog frontend.

4.27.2. Continuing TECHMAP pass.
No more expansions possible.

4.28. Executing OPT pass (performing simple optimizations).

4.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Assignment3.

4.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Assignment3'.
Removed a total of 0 cells.

4.28.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Assignment3..
Removed 0 unused cells and 2 unused wires.

4.28.5. Finished fast OPT passes.

4.29. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.30. Executing OPT pass (performing simple optimizations).

4.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Assignment3.

4.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Assignment3'.
Removed a total of 0 cells.

4.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Assignment3..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Assignment3.
    Consolidated identical input bits for $mux cell $procmux$1028:
      Old ports: A=5'10010, B=5'00110, Y={ $4\c[0:0] $4\d[0:0] $4\e[0:0] $4\f[0:0] $4\g[0:0] }
      New ports: A=2'10, B=2'01, Y={ $4\c[0:0] $4\e[0:0] }
      New connections: { $4\d[0:0] $4\f[0:0] $4\g[0:0] } = 3'010
    Consolidated identical input bits for $mux cell $procmux$1094:
      Old ports: A=5'00001, B=5'10010, Y={ $3\c[0:0] $3\d[0:0] $3\e[0:0] $3\f[0:0] $3\g[0:0] }
      New ports: A=2'01, B=2'10, Y={ $3\f[0:0] $3\g[0:0] }
      New connections: { $3\c[0:0] $3\d[0:0] $3\e[0:0] } = { $3\f[0:0] 2'00 }
    Consolidated identical input bits for $mux cell $procmux$1118:
      Old ports: A=2'00, B=2'10, Y=$3\currentstate[2:0]
      New ports: A=1'0, B=1'1, Y=$3\currentstate[2:0] [1]
      New connections: $3\currentstate[2:0] [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$1169:
      Old ports: A=3'001, B=3'110, Y={ $2\e[0:0] $2\f[0:0] $2\g[0:0] }
      New ports: A=2'01, B=2'10, Y={ $2\f[0:0] $2\g[0:0] }
      New connections: $2\e[0:0] = $2\f[0:0]
    Consolidated identical input bits for $mux cell $procmux$1196:
      Old ports: A=2'00, B=2'11, Y=$2\currentstate[2:0]
      New ports: A=1'0, B=1'1, Y=$2\currentstate[2:0] [0]
      New connections: $2\currentstate[2:0] [1] = $2\currentstate[2:0] [0]
  Optimizing cells in module \Assignment3.
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$1425:
      Old ports: A=2'00, B=$2\currentstate[2:0], Y=$auto$rtlil.cc:2037:Mux$1426
      New ports: A=1'0, B=$2\currentstate[2:0] [0], Y=$auto$rtlil.cc:2037:Mux$1426 [0]
      New connections: $auto$rtlil.cc:2037:Mux$1426 [1] = $auto$rtlil.cc:2037:Mux$1426 [0]
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$1449:
      Old ports: A=$4\f[0:0], B=1'1, Y=$auto$rtlil.cc:2037:Mux$1450
      New ports: A={ }, B={ }, Y={ }
      New connections: $auto$rtlil.cc:2037:Mux$1450 = 1'1
    New ctrl vector for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$1449: { }
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$1481:
      Old ports: A=1'0, B=$3\d[0:0], Y=$auto$rtlil.cc:2037:Mux$1482
      New ports: A={ }, B={ }, Y={ }
      New connections: $auto$rtlil.cc:2037:Mux$1482 = 1'0
    New ctrl vector for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$1481: { }
  Optimizing cells in module \Assignment3.
Performed a total of 10 changes.

4.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Assignment3'.
Removed a total of 3 cells.

4.30.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Assignment3..
Removed 0 unused cells and 13 unused wires.

4.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Assignment3.

4.30.9. Rerunning OPT passes. (Maybe there is more to do..)

4.30.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Assignment3..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.30.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Assignment3.
Performed a total of 0 changes.

4.30.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Assignment3'.
Removed a total of 0 cells.

4.30.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.30.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Assignment3..

4.30.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module Assignment3.

4.30.16. Finished OPT passes. (There is nothing left to do.)

4.31. Executing TECHMAP pass (map to technology primitives).

4.31.1. Executing Verilog-2005 frontend: /home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.31.2. Continuing TECHMAP pass.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=27\Y_WIDTH=27 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=25\B_WIDTH=27\Y_WIDTH=27 for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=27 for cells of type $lcu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.

4.32. Executing OPT pass (performing simple optimizations).

4.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Assignment3.

4.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Assignment3'.
Removed a total of 14 cells.

4.32.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Assignment3..
Removed 84 unused cells and 194 unused wires.

4.32.5. Finished fast OPT passes.

4.33. Executing MUXCOVER pass (mapping to wider MUXes).
Covering MUX trees in module Assignment3..
  Treeifying 41 MUXes:
    Found tree with 1 MUXes at root $0\clock[0:0].
    Found tree with 1 MUXes at root $0\delay[26:0] [0].
    Found tree with 1 MUXes at root $0\delay[26:0] [1].
    Found tree with 1 MUXes at root $0\delay[26:0] [2].
    Found tree with 1 MUXes at root $0\delay[26:0] [3].
    Found tree with 1 MUXes at root $0\delay[26:0] [4].
    Found tree with 1 MUXes at root $0\delay[26:0] [5].
    Found tree with 1 MUXes at root $0\delay[26:0] [6].
    Found tree with 1 MUXes at root $0\delay[26:0] [7].
    Found tree with 1 MUXes at root $0\delay[26:0] [8].
    Found tree with 1 MUXes at root $0\delay[26:0] [9].
    Found tree with 1 MUXes at root $0\delay[26:0] [10].
    Found tree with 1 MUXes at root $0\delay[26:0] [11].
    Found tree with 1 MUXes at root $0\delay[26:0] [12].
    Found tree with 1 MUXes at root $0\delay[26:0] [13].
    Found tree with 1 MUXes at root $0\delay[26:0] [14].
    Found tree with 1 MUXes at root $0\delay[26:0] [15].
    Found tree with 1 MUXes at root $0\delay[26:0] [16].
    Found tree with 1 MUXes at root $0\delay[26:0] [17].
    Found tree with 1 MUXes at root $0\delay[26:0] [18].
    Found tree with 1 MUXes at root $0\delay[26:0] [19].
    Found tree with 1 MUXes at root $0\delay[26:0] [20].
    Found tree with 1 MUXes at root $0\delay[26:0] [21].
    Found tree with 1 MUXes at root $0\delay[26:0] [22].
    Found tree with 1 MUXes at root $0\delay[26:0] [23].
    Found tree with 1 MUXes at root $0\delay[26:0] [24].
    Found tree with 1 MUXes at root $0\delay[26:0] [25].
    Found tree with 1 MUXes at root $0\delay[26:0] [26].
    Found tree with 1 MUXes at root $0\a[0:0].
    Found tree with 2 MUXes at root $0\c[0:0].
    Found tree with 1 MUXes at root $0\f[0:0].
    Found tree with 3 MUXes at root $0\g[0:0].
    Found tree with 3 MUXes at root $0\currentstate[2:0] [0].
    Found tree with 1 MUXes at root $0\currentstate[2:0] [1].
    Found tree with 1 MUXes at root $auto$rtlil.cc:2037:Mux$1426 [1].
    Found tree with 1 MUXes at root $auto$rtlil.cc:2037:Mux$1428 [1].
    Finished treeification: Found 36 trees.
  Covering trees:
    Replaced tree at $0\clock[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [23]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [24]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\a[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\c[0:0]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\f[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\g[0:0]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\currentstate[2:0] [0]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\currentstate[2:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2037:Mux$1426 [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2037:Mux$1428 [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
  Added a total of 0 decoder MUXes.

4.34. Executing OPT_EXPR pass (perform const folding).
Optimizing module Assignment3.

4.35. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Transforming FF to FF+Enable cells in module Assignment3:
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2509 for $0\clock[0:0] -> \clock.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1716.

4.36. Executing TECHMAP pass (map to technology primitives).

4.36.1. Executing Verilog-2005 frontend: /home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_ffs_map.v
Parsing Verilog input from `/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Successfully finished Verilog frontend.

4.36.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.

4.37. Executing OPT_EXPR pass (perform const folding).
Optimizing module Assignment3.

4.38. Executing SIMPLEMAP pass (map simple cells to gate primitives).

4.39. Executing TECHMAP pass (map to technology primitives).

4.39.1. Executing Verilog-2005 frontend: /home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_latches_map.v
Parsing Verilog input from `/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCHSR_NNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_NNP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPN_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_PNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PNP_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Successfully finished Verilog frontend.

4.39.2. Continuing TECHMAP pass.
No more expansions possible.

4.40. Executing ABC pass (technology mapping using ABC).

4.40.1. Extracting gate netlist of module `\Assignment3' to `<abc-temp-dir>/input.blif'..
Extracted 196 gates and 229 wires to a netlist network with 31 inputs and 35 outputs.

4.40.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + read_lut <yosys-exe-dir>/../share/yosys/quicklogic/pp3_lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + sweep 
ABC: + eliminate 
ABC: + if 
ABC: The network was strashed and balanced before FPGA mapping.
ABC: + mfs 
ABC: + lutpack 
ABC: + dress 
ABC: Total number of equiv classes                =      65.
ABC: Participating nodes from both networks       =     165.
ABC: Participating nodes from the first network   =      67. (  79.76 % of nodes)
ABC: Participating nodes from the second network  =      98. ( 116.67 % of nodes)
ABC: Node pairs (any polarity)                    =      67. (  79.76 % of names can be moved)
ABC: Node pairs (same polarity)                   =      67. (  79.76 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

4.40.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       81
ABC RESULTS:        internal signals:      163
ABC RESULTS:           input signals:       31
ABC RESULTS:          output signals:       35
Removing temp directory.

4.41. Executing TECHMAP pass (map to technology primitives).

4.41.1. Executing Verilog-2005 frontend: /home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_ffs_map.v
Parsing Verilog input from `/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Successfully finished Verilog frontend.

4.41.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 0 unused cells and 253 unused wires.

4.42. Executing TECHMAP pass (map to technology primitives).

4.42.1. Executing Verilog-2005 frontend: /home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_map.v
Parsing Verilog input from `/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX8_'.
Generating RTLIL representation for module `\$_MUX4_'.
Generating RTLIL representation for module `\$_MUX_'.
Generating RTLIL representation for module `\$_NOT_'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_map.v:44: Warning: Identifier `\Valid_mult_w' is implicitly declared.
Successfully finished Verilog frontend.

4.42.2. Executing Verilog-2005 frontend: /home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_lut_map.v
Parsing Verilog input from `/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_lut_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

4.42.3. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011100011100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011000 for cells of type $lut.
No more expansions possible.
Removed 0 unused cells and 162 unused wires.

4.43. Executing Quicklogic_EQN pass (calculate equations for luts).

4.44. Updated 81 of LUT* elements with equation.

4.45. Executing AUTONAME pass.
Renamed 971 objects in module Assignment3 (22 iterations).

4.46. Executing HIERARCHY pass (managing design hierarchy).

4.46.1. Analyzing design hierarchy..
Top module:  \Assignment3

4.46.2. Analyzing design hierarchy..
Top module:  \Assignment3
Removed 0 unused modules.

4.47. Printing statistics.

=== Assignment3 ===

   Number of wires:                 69
   Number of wire bits:            123
   Number of public wires:          69
   Number of public wire bits:     123
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                116
     LUT1                            2
     LUT2                           23
     LUT3                           43
     LUT4                           13
     dff                            33
     dffe                            1
     qlal4s3b_cell_macro             1

4.48. Executing CHECK pass (checking for obvious problems).
checking module Assignment3..
found and reported 0 problems.

4.49. Executing CLKBUFMAP pass (inserting global clock buffers).
Inserting $_BUF_ on Assignment3.clk[0].
Inserting $_BUF_ on Assignment3.clock[0].

4.50. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port Assignment3.a using outpad.
Mapping port Assignment3.b using outpad.
Mapping port Assignment3.c using outpad.
Mapping port Assignment3.clock using outpad.
Mapping port Assignment3.d using outpad.
Mapping port Assignment3.e using outpad.
Mapping port Assignment3.f using outpad.
Mapping port Assignment3.g using outpad.
Mapping port Assignment3.x using inpad.
Mapping port Assignment3.y using outpad.

4.51. Executing SPLITNETS pass (splitting up multi-bit signals).

4.52. Executing SETUNDEF pass (replace undef values with defined constants).

4.53. Executing HILOMAP pass (mapping to constant drivers).

4.54. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Assignment3..
Removed 0 unused cells and 8 unused wires.

4.55. Executing CHECK pass (checking for obvious problems).
checking module Assignment3..
found and reported 0 problems.

5. Printing statistics.

=== Assignment3 ===

   Number of wires:                128
   Number of wire bits:            128
   Number of public wires:         122
   Number of public wire bits:     122
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                127
     LUT1                            2
     LUT2                           23
     LUT3                           43
     LUT4                           13
     dff                            33
     dffe                            1
     inpad                           1
     logic_0                         1
     outpad                          9
     qlal4s3b_cell_macro             1

Loading PCF from '/home/vedula/qorc-sdk/fpga-examples/Ass3/pygmy.pcf'...
Loading pinmap CSV from '/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/arch/ql-eos-s3_wlcsp/pinmap_PU64.csv'...
Processing cells...
  type       | net        | pad        | loc      | type     | instance
 ------------+------------+------------+----------+----------+-----------
  outpad     | a          | 3          | X12Y3    | BIDIR    | $iopadmap$Assignment3.a
  outpad     | b          | 64         | X14Y3    | BIDIR    | $iopadmap$Assignment3.b
  outpad     | c          | 62         | X16Y3    | BIDIR    | $iopadmap$Assignment3.c
  outpad     | clock      | 34         | X22Y32   | BIDIR    | $iopadmap$Assignment3.clock
  outpad     | d          | 60         | X22Y3    | BIDIR    | $iopadmap$Assignment3.d
  outpad     | e          | 59         | X24Y3    | BIDIR    | $iopadmap$Assignment3.e
  outpad     | f          | 57         | X26Y3    | BIDIR    | $iopadmap$Assignment3.f
  outpad     | g          | 56         | X28Y3    | BIDIR    | $iopadmap$Assignment3.g
  inpad      | x          | 31         | X16Y32   | BIDIR    | $iopadmap$Assignment3.x
  outpad     | y          |            |          |          | $iopadmap$Assignment3.y

6. Executing Verilog backend.
Dumping module `\Assignment3'.

7. Executing TECHMAP pass (map to technology primitives).

7.1. Executing Verilog-2005 frontend: /home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v
Parsing Verilog input from `/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v' to AST representation.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\qhsckibuff'.
Generating RTLIL representation for module `\qhsckbuff'.
Generating RTLIL representation for module `\gclkbuff'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\dffsc'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Successfully finished Verilog frontend.

7.2. Continuing TECHMAP pass.
Using template logic_0 for cells of type logic_0.
No more expansions possible.

8. Executing TECHMAP pass (map to technology primitives).

8.1. Executing Verilog-2005 frontend: /home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v
Parsing Verilog input from `/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v' to AST representation.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\qhsckibuff'.
Generating RTLIL representation for module `\qhsckbuff'.
Generating RTLIL representation for module `\gclkbuff'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\dffsc'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Successfully finished Verilog frontend.

8.2. Continuing TECHMAP pass.
Using template qlal4s3b_cell_macro for cells of type qlal4s3b_cell_macro.
Using template $paramod\LUT1\INIT=1'1\EQN=675885097 for cells of type LUT1.
Using template $paramod\LUT3\INIT=9'000000001\EQN=8'00110000 for cells of type LUT3.
Using template dff for cells of type dff.
Using template $paramod$e26d5f83608228413558872bf585b830a9f56b6a\LUT2 for cells of type LUT2.
Using template $paramod$ebab70a5830b6a9f5483ac0ce1c2f41b14b4eddd\LUT3 for cells of type LUT3.
Using template $paramod$08b61d33fc5053edb3ff48cc7932a6bed21127f8\LUT3 for cells of type LUT3.
Using template $paramod$0bac8de66bcfb448c202f31a4c603d45054ce4da\LUT4 for cells of type LUT4.
Using template $paramod$bf21fee4b6975de7353dd955d4b3a8eef751c7c5\LUT2 for cells of type LUT2.
Using template $paramod$78a792e807544314cbd918ff3dc0665065e00762\LUT4 for cells of type LUT4.
Using template $paramod$eaa5b8ce31b5b445eaa93b247abc2c39669e1302\LUT3 for cells of type LUT3.
Using template $paramod$0dee8c45763e54f30353b4988d9129c450b64183\LUT3 for cells of type LUT3.
Using template $paramod$87479d81e94adb7c496af3ceb60f8a19e8997a42\LUT4 for cells of type LUT4.
Using template $paramod$54a2ae5f329fbd428be50ef1ea21b6a0033f5b14\LUT4 for cells of type LUT4.
Using template $paramod$6e26883c94a732f25629a98baa649e8a73062a9c\LUT4 for cells of type LUT4.
Using template $paramod$5fff4eed3dfe46da722c8abfad4e43b106987cbf\LUT3 for cells of type LUT3.
Using template $paramod$86fc6f3441a6779c63af6935d48b3ebd1c0460a9\LUT3 for cells of type LUT3.
Using template $paramod$e435219c67dd6fa5c717b1d9217d43e2ae34fca5\LUT4 for cells of type LUT4.
Using template $paramod$a3585111a807d9eb68f35b3cdf72c072f00fd2ee\LUT2 for cells of type LUT2.
Using template $paramod$7b64ab56ee736637316f20122f0b33f6a88862aa\LUT4 for cells of type LUT4.
Using template $paramod$03eed137224500a5a8c1bb8d02f1b39dd96a7b82\LUT2 for cells of type LUT2.
Using template dffe for cells of type dffe.
Using template $paramod$6978ec95fabd9a2c58a086b94b6feed90355b35d\inpad for cells of type inpad.
Using template $paramod$a05482f0aefd17419d352e885b744935e93eea82\LUT3 for cells of type LUT3.
Using template $paramod$563d474d8b6173e0ebf78f4a4a3575585c4c0a2f\LUT3 for cells of type LUT3.
Using template $paramod$ef1a7edb200c1b1534825302234a1d0bce5a3341\outpad for cells of type outpad.
Using template $paramod$03fa78d84bd5e07f6e124fa217a4ce84543d615a\outpad for cells of type outpad.
Using template $paramod$3494bf91dff70d828c5f5312272dede938de1112\outpad for cells of type outpad.
Using template $paramod$4da62a2f3593426548f45892aaeb7356ad46a6a4\outpad for cells of type outpad.
Using template $paramod$1ff3cb955baebb34bce84175d8b64f00bac588c5\outpad for cells of type outpad.
Using template $paramod$adb3e2998d36d23e78e72d530fe94019908a146e\outpad for cells of type outpad.
Using template $paramod$02aa829d7bb4d3bbae67ad5ee2e5a326704559e9\outpad for cells of type outpad.
Using template $paramod\outpad\IO_PAD=0'\IO_LOC=0'\IO_TYPE=0' for cells of type outpad.
Using template $paramod$d8b4ab69a8b5413c066ad38d899c9d4a3dedc93a\outpad for cells of type outpad.
No more expansions possible.

9. Executing TECHMAP pass (map to technology primitives).

9.1. Executing Verilog-2005 frontend: /home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_map.v
Parsing Verilog input from `/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_map.v' to AST representation.
Generating RTLIL representation for module `\ram8k_2x1_cell_macro'.
Successfully finished Verilog frontend.

9.2. Continuing TECHMAP pass.
No more expansions possible.

10. Executing OPT_EXPR pass (perform const folding).
Optimizing module Assignment3.

11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Assignment3..
Removed 0 unused cells and 168 unused wires.

12. Executing SETUNDEF pass (replace undef values with defined constants).

13. Printing statistics.

=== Assignment3 ===

   Number of wires:               1025
   Number of wire bits:           1142
   Number of public wires:         997
   Number of public wire bits:     997
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                126
     ASSP                            1
     BIDIR_CELL                     10
     C_FRAG                         13
     F_FRAG                          2
     Q_FRAG                         34
     T_FRAG                         66

14. Executing JSON backend.

15. Executing Verilog backend.
Dumping module `\Assignment3'.

Warnings: 9 unique messages, 12 total
End of script. Logfile hash: abd678705b, CPU: user 2.26s system 0.08s, MEM: 265.89 MB peak
Yosys 0.9+2406 (git sha1 9ac3484, x86_64-conda_cos6-linux-gnu-gcc 1.24.0.133_b0863d8_dirty -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/root/anaconda3/conda-bld/yosys_1607410735049/work=/usr/local/src/conda/yosys-0.8.0_0003_e80fb742f_20201208_122808 -fdebug-prefix-map=/home/vedula/qorc-sdk/fpga_toolchain_install/v1.3.1/conda=/usr/local/src/conda-prefix -fPIC -Os)
Time spent: 65% 18x read_verilog (1 sec), 7% 4x write_verilog (0 sec), ...
